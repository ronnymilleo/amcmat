function [y1] = amcFcn(x1)
%AMCFCN neural network simulation function.
%
% Auto-generated by MATLAB, 06-Nov-2019 14:29:31.
% 
% [y1] = amcFcn(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.869494148381537;1.75797755333617;0.00127730627228262;0.002104509357689;2.26963416027136;0.113904396504205;0.0150072169353244;0.0734221284468832;0.122505815915885;-0.66933626030711];
x1_step1.gain = [11.3298452410488;12.6743163395867;107.743626945423;70.7427628454961;0.649938337174449;0.00740368639687639;3.28480358846671;4.8499134764883;2.99649679533739;1.07901233207668];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.4792828277630609701;-1.2869144677176580505;-1.4896055250404010017;-1.5662810090701069221;7.621639528972957045;-0.63128271789812107073;-1.8808791545557301816;-9.9650005026784214124;2.4203911592376261552;0.63691085929976121172];
IW1_1 = [0.91362127755536370888 0.50318429313066659336 -0.73373722112422345987 -0.56932062480523859538 -0.71282150711004810262 -0.47155775985060410793 0.25870626742210839355 0.17194235398135465642 0.20705329705888084191 -0.54647075664525146532;2.1285955145428188118 -0.02871739363290965602 -5.9726244661021388183 4.6174836569580541834 0.034083239540585195948 -2.6069555870154372812 2.5226928951974785242 1.260799296153520821 2.3111678692761281617 0.55908194152312595815;-0.62779777965643146498 0.046662280819379092778 -0.040887716762362205647 -3.2912403109449734906 0.43831902573415215674 -4.3765375760164131336 4.1816226759263113166 -0.19215584911328345563 0.57164418593539378932 3.0694025725626374879;1.7373092201356754583 0.030462832636309215839 5.2093441119667662775 -2.0265234766622839402 2.3696581092546487035 -2.5060255187609845606 0.12984922929481837461 -1.7886881325871704096 -4.9075854686400273152 -0.74244196878922319449;-3.1119554480934055185 0.027508640707201360842 -2.238728217189785763 -7.6357471794622497896 -3.4680524601158451148 2.9635634552511667117 -2.5123480888776437148 1.4639369376867106265 0.90418521851360178498 -1.125039124233016441;-0.1718448778796083376 0.038798157875361054259 -8.3967795917595555721 8.2558344108799204264 1.8162089197569672994 -2.0415431359369562436 -3.7645285223076951908 -1.1271637470597806185 -2.5709583863078089294 -0.16953274576781870997;-1.124632649243660687 0.011077538833359584086 7.1694140217940898197 -7.9491504185516328462 0.90941407467483625915 -1.7845665291154786392 -0.74071391990243917736 -1.072286801208593543 -3.120909065237241542 0.35290553029157628595;0.60300232393214925342 -0.060476999065189371296 12.821458570795304155 1.3328026890451505349 0.037998336599917921508 0.68324650500249484164 4.2444465425521489266 1.0722909264263622564 0.35607197593973033412 -0.43658281519026770345;1.7602401132268719053 0.19047527611884307319 2.2854002450824633108 1.7136891392306228266 0.38096123878837506727 0.76155086167513486028 -0.52029312035882979703 0.60160237552371398362 -0.27495572569206949698 -0.33963420042395986442;-1.0857669187009728606 0.015908622786290363416 -0.44613596172994879341 4.5615673813291852667 0.34827106621652464957 2.3584832343235389018 -4.1328367626343824881 -0.7019105171833345258 -2.5565884958204154742 -2.6313308389014662403];

% Layer 2
b2 = [-1.1987491603872937329;0.41130674355112883944;-0.4121473684444084129;1.2468109467280161784;-1.2523553235987023857;0.9432273693400901049];
LW2_1 = [-0.33459380777787811612 2.189116147079940955 0.4452740091372694442 0.3825908977231201602 1.069960957126482759 -0.19928338445500448639 3.7521886596425351179 -0.95890357610365817287 -0.6875128431890779046 4.9629602569789792454;0.72438057236431319108 4.8456260537318467385 -3.1921632028181305962 -8.026917916032786593 -1.3016205006939471911 9.72370261207163189 -5.6884133789949293813 -2.3599909411504409462 1.3790766860230772028 1.2160472183812802704;-0.13801483424574825798 -0.69898003667950936446 -3.6725577255183847747 0.45174754748702455887 1.4137933159071103262 4.4619343806868441149 -2.6587892113594593368 2.914822034574545917 1.7138259850639039339 -2.5383339335362409273;0.0073321261558125924371 2.6737407253288538733 -4.177898871081465515 -5.2771869526982646548 -2.9950914870361509124 1.0437499125805900224 -0.061998916197653332338 -8.732646227288697105 0.3563500882505921119 3.345861499365371472;1.1611824834201647239 -0.17179370468594981625 1.2073112351002603937 2.8230454764625303454 2.773133346399628163 -1.1384807426691334609 -2.0148494838177009036 -3.4329568883873324836 1.4191308122878352194 -6.2787879084438529276;1.123147574536124349 -6.141870975830408419 -6.8377430217195831474 -0.35947116814070634305 1.4106435267003030187 3.0700042055563803167 0.48112557883033585382 1.6801759964831277649 -0.42931665633993354447 -2.6263989510414811335];

% Layer 3
b3 = [3.3637986416842657889;-2.5577260668353893891;-0.20617541317803431133;0.097464945749923148632;-0.43131736083606625476;-1.5092170369635549143];
LW3_2 = [-11.56071932065357899 0.78373964129865580919 6.4050427459012500009 6.2277449401966373799 6.3805728495174065529 4.2380056320548131765;8.4722388968539998899 5.0263905258478258631 3.970611726771007266 -0.64016981318559873504 -4.9887530269080766487 -1.8087591068766273317;3.1618222184613533621 5.2967097366997428765 -6.4085977554905406706 0.66362114540143579688 -7.8581744518182219394 -2.7322999415983195703;-4.5646154555985312129 -9.7348157972585234177 -6.9206379094364045557 -0.021709214493281850378 4.2245047510056439322 -3.090359434796443594;4.9439646746911467545 -2.992666758935929483 4.7800346933124044924 -0.62092341288320407333 -3.8991055069558009372 0.089363132123003785612;-1.0045758870942669283 2.7173836581236652243 -5.2226046790966833555 -7.0275828843399690271 5.8131346927347564701 1.0608099345659030011];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = softmax_apply(repmat(b3,1,Q) + LW3_2*a2);

% Output 1
y1 = a3;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
