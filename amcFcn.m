function [y1] = amcFcn(x1)
%AMCFCN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Oct-2019 16:23:56.
% 
% [y1] = amcFcn(x1) takes these arguments:
%   x = 9xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.276333573258812;1.56707198947251;0.123186973035246;0.137339022098391;2.28305935410499;0.0137414273045052;0.00190972128671912;0.0263225139661572;0.0437016916602887];
x1_step1.gain = [1.54458476050487;3.74041584046366;7.70283468845026;5.95105328048128;0.709346522947788;0.0152303720864511;3.18636555202008;4.37592943201196;2.66682507594027];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.6568131343902514629;12.557043525947086948;-13.188578005863565323;8.5018070601019406496;9.7419744135599497525;0.28592939398613947954;-1.3620627131173477231;7.9356706313261939911;-0.48858997066253218033];
IW1_1 = [21.906816115641312592 -5.0480463343389470054 13.672630996475929166 7.1979566380350403776 1.8702271805670207527 0.87364117201235980126 -1.3079975516206974184 -9.7674135322809778614 -1.3224334753078161864;-7.5030713791279630698 1.0711383507201635013 9.567716256209013892 -13.396100252903790917 -0.28391174293231052905 3.4582684608964964212 3.7607096824324099948 1.2488590895398954395 -5.1701385815237799193;1.462282428512286403 5.5158128419698222444 -5.7881314327123503105 -3.4449161062783058007 13.378905443833188471 -19.578184557869022342 9.3587544789977048509 5.4146526008486821624 -0.084221977132407435662;0.42584937060068911441 -7.3606779163711744118 -15.140895859835380222 21.049255435874488995 6.8690399249260361003 9.8180536521536510008 2.5946064878613772642 8.6400337003020162285 7.9304777185309776044;-8.8609180147358390656 2.3453469182670123594 -0.70128609281099707484 -13.318571101108306109 -1.255623041210434554 4.181500539006821171 0.98811273466409366151 -0.98320210032845523074 7.1941038576406528549;25.624729592705744352 -2.8409736756926053936 7.1359441040263229539 -2.3360930456458475213 -1.2217389497243695828 1.491601174436779198 1.3770334146577183354 2.078869280476474124 5.5548166364426201369;3.4203461255808735864 -0.75903634025623867299 -9.3507555036053826569 7.8199034953905064427 2.6244815458003252218 2.0597968687566443613 -4.2292152826998758997 -17.022445919300430717 13.818071871143382978;16.964920552290223554 -7.5324047597439074408 11.508597652148182533 9.1697079789829434304 -14.712720106567264367 17.708905727554988374 -4.3780663268453174908 3.7905946481736774167 -3.3949252187824874305;4.9486469692716008595 -2.5015152802225282258 3.4714695072908328122 4.6439587538313711335 1.3957970416546536807 0.99442913540057875643 -9.9626614745626049796 -5.1621810298576713549 -6.676697011441337537];

% Layer 2
b2 = [-1.2907480681033969283;-22.744046722163623997;3.9362601500168659108;-25.031082158003442828;11.916048400987673261;25.763306323889430871];
LW2_1 = [7.8088196853715974299 -4.7521022170055635669 1.4569029275029681259 -8.9319067584071785149 5.5015053197084373693 -10.182377603003519795 -9.8544802269317255394 1.08938668064719546 0.93101842270635681853;1.7949698200547383742 -41.050990870600109872 -0.31584732915985030965 0.020409208783108586521 4.4692704193970840265 5.1683662257854079414 -11.533150700116351572 -0.72002093173254022584 2.301113354598661509;-7.8992356662195160055 -1.2824755364720410444 5.5105104123013504136 16.023859945087465917 7.5139224354133151706 4.9209370599693489368 12.609013891665837193 5.6555675243393945806 19.987919706745440607;11.028052388736533374 -4.9586762233032626312 11.379573155496718329 2.825115277271565084 14.50975581415636384 -28.406483521379783497 -4.141423826871517555 10.540638636029155961 15.41717609929955124;-1.8598455409517138381 22.591023938413698602 -1.0871058528406594146 10.921764620540574953 -3.184875754469386866 10.192798362291453529 4.6540761589090200445 -1.0147861727904863294 -2.701188659788816171;-4.3435794452118274833 10.850493400220488027 -5.2588193956938287243 17.647761693162753005 -2.9917099790910177681 10.167129018691305475 -35.136894345043721444 -13.397171852032959904 33.117860493150509171];

% Layer 3
b3 = [-9.6330675939990015877;17.973706993145498245;-8.5644813824459635754;-1.9073722231073177991;-3.4775715987041029287;5.1472439370844691453];
LW3_2 = [9.2062809548620059275 -29.68865460612057916 18.301496129736928964 3.5653832856266021167 9.2260151998104671378 16.218818799887195325;10.855492970572624856 3.737333981090270818 -34.95184051837102146 -6.8682163705320746772 19.235895042539812749 -42.264288735597475011;-13.807624895581458446 -8.580790979131997176 11.627085622711124557 -3.3164824814459676894 23.713449754062864372 5.7776475666799314013;-8.1338956200843508526 33.401546384293844483 8.9702291357699142083 6.6130826902612280804 -23.162200968582293825 -4.4186676193887892694;7.3769154648808354935 -8.0849687781218833038 -0.3931085120719308712 5.350222015391257635 -30.106747071802175242 17.915530628461830531;-5.2240122347952260284 9.0250275546812090965 -4.1864219187903968233 -5.2752487793815427963 1.4399952758454581669 7.0001124560925847007];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = softmax_apply(repmat(b3,1,Q) + LW3_2*a2);

% Output 1
y1 = a3;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
