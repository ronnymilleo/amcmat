function [y1] = amcFcn(x1)
%AMCFCN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Oct-2019 16:55:30.
% 
% [y1] = amcFcn(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1088.55414617841;1088.55414617841;0.00128260466765222;0.00211045384834842;2.27368804311945;0.119297708852664;0.0150138863152877;0.0737547525601737;0.122533034389586;-0.656747438986251];
x1_step1.gain = [0.000139897418003759;0.000139897417843617;109.412716297631;71.9398862049069;0.809151664962748;0.00751080334769877;3.34559707285356;4.89632075468083;3.02852611613784;1.07895547213977];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.27450126921406564628;-4.78017580894366656;17.528671344764603646;-1.5482933063141652852;0.12720202969330474119;-8.7187543787709920196;-12.400348033995394204;-4.0111447342205606148;-1.4977134001994552026;-0.21064571238623194804];
IW1_1 = [-1.5839139936530863828 -1.4586441019590821178 -8.8852042208608299489 -14.762176354350467378 -11.886013913088643079 -9.4996811206525464399 1.6506805014126122444 -0.80401523729308344013 1.6272753358774276755 4.3806389985838602996;-3.771841569187621257 -3.3417900512980525107 13.550501122554285516 -10.023099586789600224 -6.0785145064968517659 8.6605201615747677835 -6.7249945769294399156 25.778678636988846762 -6.3369819694780566977 18.420358464418878697;-0.58621142160234018803 -0.64877181810502471127 11.035475089385743175 -12.268918124556384086 0.38443790198629157473 18.40489662069458987 -15.538929025071954726 6.8931351989744777953 -8.0154010111286098095 -2.2422395933717371719;-0.054930824388331418728 -0.37522501085043213909 -28.103274803144149274 28.910989809243677229 0.20287433038810714914 -0.31465416841476162579 -9.2020385488575069388 -4.6542576895500147316 11.971016690036094587 -1.081533428403562036;6.0223995807009966796 5.4238282476345123229 16.256393839628685782 -6.9482109330377994638 -0.27944461553140925725 8.3640639187411309763 1.0329941667451947307 0.9479650806223741677 -3.6082592181341595072 -1.6727505513014961913;2.9280963668960997559 2.9685580922548706617 4.8688927428777128981 0.1430079343526629021 -0.21662369625549657282 -2.4989093795078289872 -4.3908915637564094325 1.7625535107377694466 3.8303062211051375208 1.2080528547796345329;-6.0939905350910246185 -5.6030441756839719503 -8.0444622314090548088 13.623041398150551373 -0.32341755313713338449 -1.5464388852420845044 8.4399565549990835933 -3.3655093288885908898 2.1625017555838716987 12.230785829959774702;1.3049238959709741348 1.239833723914717023 -3.4936493879696408627 2.2275586586062177119 -0.051796849242527392976 -4.3329400591816025212 -2.0789267618109565916 5.2238586735296506092 -0.76271875332504490697 5.2021993577866210146;0.19731222668889220051 0.12575416058428046107 3.6986154003757971687 -2.8933105537579675293 -0.4499255475249099856 0.062661928977485181758 -2.8284619101554837606 8.6880139448003497193 -14.492947499830313163 2.7955788149165341494;-2.2648329515346889984 -2.5588543106590990739 -1.7828963021680621637 -8.9451932710955031069 1.4488162306712495386 -6.5591851198492276964 -5.6671468582236350642 -12.139062060357941775 23.978239328738922609 -5.357862346617809024];

% Layer 2
b2 = [-2.1122299141904186115;11.099858322956148271;-6.9154717388876782991;7.0856182261883748907;3.2719200950285034502;3.1563125362620749748];
LW2_1 = [2.7236692346406861098 -0.32268078415358542044 1.8867370690756770646 -4.3298048824630983589 -1.0947895807309706573 3.2600508318865739632 -0.41706544228295028276 5.7344873598646692869 -2.382676083542061285 0.89221047408192644124;-8.3943884368366088466 -12.588881996755230119 -1.5385624803364066349 17.102270495851456644 2.5093554230548789086 0.32713630437015972507 -0.39485826347471308928 -11.81616658311964585 13.744877092241795324 0.41462355883169954573;26.902158732552109655 -2.1828872642204042442 -11.106857171813988572 -1.1570205351213231904 6.1699282110663355994 -23.743129309469736654 -19.283248443088780277 29.62174149967579595 11.630364965228377372 -7.0889102410544460042;-8.1845422403308312198 0.66952045769386936414 3.6548434774677396319 6.8153444539390415358 -5.1123309407677961502 3.1526639311317494752 7.4081755596416343224 -13.825247033277507924 -1.6843010082963061347 -1.8119169637131911088;-1.7294275853129583709 -0.90841837625552723789 2.1790238118138884893 -0.8088907486850107631 -7.5736931679860530764 -5.3733577373907923658 2.340605722241772213 -16.110872002999347075 -0.36065468630955238583 0.90361646545020790633;9.1212389869695975619 -1.4680985569953581837 0.86749881433519415719 -7.6527590731896699694 4.2028092883224390519 -15.796702088048474977 3.9154156809606575074 -0.7717374334626361243 -0.97843944625947554261 -27.590364268557802774];

% Layer 3
b3 = [-11.803319517866087907;4.6659751507992819342;2.0569021755477381319;-0.13563514232891071831;4.0025322069693967109;1.2451623281701245105];
LW3_2 = [-11.96727160487369801 2.7757940024629821352 9.2437627374587716389 6.084490315373088265 9.9589451007521105907 -0.96882887827459351904;7.1438739643575912552 -3.8836437162618953067 12.596938836918907256 6.1530101426101184714 7.3113240407900237372 -2.859160478506520775;-25.888794050003038905 -0.51063422460390262003 -20.394632653673212985 -0.95921570823641755243 -9.530552690867999388 8.0429440216870453639;28.850787815836049788 -10.068559469007846374 19.53333041504949108 -8.4150187692131179773 -5.727070997490108617 -11.300494274469238931;-6.4930201484349518992 14.305020006325104731 -13.833904423757950042 -4.9850755192745017652 -3.9153705631472663917 9.5113121878749318228;9.1951698689474792303 -2.2446223712091208924 -6.6803167302074415446 2.4908635276534587533 2.2474875641443969876 -2.1479908729120831268];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = softmax_apply(repmat(b3,1,Q) + LW3_2*a2);

% Output 1
y1 = a3;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
