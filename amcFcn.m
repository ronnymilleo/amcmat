function [y1] = amcFcn(x1)
%AMCFCN neural network simulation function.
%
% Auto-generated by MATLAB, 25-Sep-2019 16:49:55.
% 
% [y1] = amcFcn(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.84632134501477;1.56741756061804;0.145946384472136;0.15966162166328;2.28156539174944;0.119172194198653;0.0150656480356961;0.0737630884126878;0.122744074467236;0.01];
x1_step1.gain = [2.75988923183414;3.34888594009849;7.85759883090719;6.06115800582242;0.764058755505252;0.00799707345301944;3.32032512680822;4.84765622926369;3.01608955573716;0.0632655595299235];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.8706384342648259;12.553185074363437224;25.937811839749301157;-5.9330699712507541932;-3.0941196609903487413;2.7466316644862884822;-2.0681901707533327794;8.2449782594852631945;0.85543094379148287842;-1.9357009551263186786];
IW1_1 = [3.1599650118444246871 7.9434726891083924372 -4.0799514461253734154 7.0755486735992541014 4.9109942475453634003 6.0953251381213036098 -7.3373024518251304116 -1.6158351350465904872 -7.2159343655792502759 -7.5058752340018815019;-0.62245237299514954987 0.22783991552497814825 1.2039759971720114251 -2.1613875853246380387 -0.28408748639373476719 -0.085801203864740591132 34.117576651098914908 3.2395391780148639072 -27.857684322186518244 1.6290961898113234252;1.5053809805026685531 -0.28793931413336526504 -2.0333742375801051594 2.4602476021240358151 0.038333073010059275088 0.20854507923797716007 53.147197593368929347 -0.61627522153161073959 -63.54788000478348664 5.5927203858377652068;-0.22194974073293649575 3.4143071608061257294 -21.588645015584809528 8.9226288534777928874 0.46851258350566793442 1.4083670789626592246 6.7285337273946419501 -2.7047920216800860338 -0.077586588049508548037 -2.6243492801126908631;-2.2732368746766797862 0.46306970358013704869 -2.9337235090977684671 2.7499529338450607874 0.76342911518915490543 4.9061156436762294319 -7.5508905256292182528 -11.840093918549415619 -4.0298520940790805156 -3.0720258396569306569;-4.074284255703030766 1.1731286898067840863 0.68636882687529998659 -2.3552001226928234168 0.21010782211208495207 -0.71627801515312805591 -3.2388297460422967866 -2.2825076969304478602 -0.17057217417454192954 3.5203241852043785087;3.7969456927042011252 -0.66630729154765677702 -3.8176303757944132222 4.9835803340240447667 0.087637299193715587076 0.73769839265878511814 -15.523575796838217755 -1.6534506954140968382 18.37766010328902766 3.4833738560082583291;-0.65186111309112659828 0.20792115459864957128 0.20307891770575972612 -0.8798610725071480676 -0.050544110841030831516 0.61450177344649570266 24.198180226727512121 0.24054883107446375923 -9.2569854187548941127 1.3262973130854163184;2.0494357296473735275 0.69289429956114989562 0.25468497676682017028 -7.7262515566033629355 -1.0881651030870482799 -2.5052116028298385686 -6.975168796874441135 7.3525586113129373089 -8.2105336490706672947 0.95711823081627223075;-1.3444936529484148302 0.26988470529498731487 0.81227900655832063759 -1.7450343432551567169 -0.18011097123539876463 -0.26534942345032047628 -18.569741209723925834 2.3105935545504125983 27.309348967018756582 6.8514843627070431964];

% Layer 2
b2 = [14.2693442294727042;6.1499092398101167234;25.153809212664828721;-1.9794802086291602983;-5.9238184908703095388;0.39585293892893791412];
LW2_1 = [-5.9988642501174842536 -1.198214286435471676 -22.555359469216746504 -15.690001851030880076 -11.992996589824340248 -3.9653522535914520475 9.1622255039484574723 -6.3979034348011554201 -2.8516866353098495601 0.11212188069289702463;5.8625658010220824679 -10.101764828213678271 -28.1151853892088468 1.527438056078822548 0.23666429987689496794 -20.158287949301630704 16.664346174092635522 -7.7056639477195316701 -8.5068050751582262592 15.834604561903885767;6.9677813400452546233 -23.898237463356178267 -69.469693700782926271 -5.9881674842028713712 17.321983853964070477 21.802868858396422524 35.551243092612061503 -22.351915955398471425 22.80814330361068798 47.285615978373229495;-3.9186560564802284112 -9.3371538174726396164 8.0850959958610282285 -1.0783634717967740535 -2.3196537915353956372 -5.4676570720194348496 -5.7131791553180493182 7.8680455977243495269 0.18106485274229519589 12.955666161979548789;-7.4967396475760894603 -15.13145492418748006 4.9173959705269156828 -2.031618508102673637 7.076274726059525122 0.64645926417954324705 -14.164064642252233384 18.397118448430500592 1.245244702716405083 10.193746358278332309;-1.5738647841537252159 13.264236230095141522 40.979614666908240395 -23.868514862121962494 -7.6216838574146033025 1.6328028323391154952 -25.192588316270306592 12.810452410071260232 -11.825668165712698965 -25.687713011816509123];

% Layer 3
b3 = [4.0304321922028139014;17.867641526502204385;-3.0825490714522167934;-4.6496106210113179458;-17.242888525644996633;1.8235661683405564037];
LW3_2 = [9.0500176006374708493 -16.436181091455200232 -1.7791751390517529519 -19.509144828593779408 13.196857735205576034 -3.9462564733691030128;6.4404146347846547016 15.153521216979346065 30.699397810765667316 12.792467858455541574 -3.159874758180576837 -16.322250036881335689;25.534778096935408342 16.873653054825595632 6.2627773917711104801 -3.2631295009649980976 0.83362758449158280705 5.6866601052943641648;-28.073236086322534533 29.453345544482260721 46.739631655411244537 0.87607857208578565622 -7.8366424770756291096 -37.660060939840576566;-17.180356067786277663 -50.337213894424245098 -77.956122757952101665 -6.2577274631508101876 -0.7363739850748751703 47.667727342434403681;6.1967935465784300675 7.2665917623990647911 -5.5590102424136800252 15.142540823075535172 -2.9089691750976167661 6.1583657933581399391];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = softmax_apply(repmat(b3,1,Q) + LW3_2*a2);

% Output 1
y1 = a3;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
