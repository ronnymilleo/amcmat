function [y1] = amcFcn(x1)
%AMCFCN neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 02-Oct-2019 18:07:17.
% 
% [y1] = amcFcn(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.274981029701267;1.56682487022534;0.122323753020703;0.136472645582127;2.27003403335652;0.114828716599346;0.0150139545182386;0.0736005366161767;0.122533312702105;0.01];
x1_step1.gain = [1.54320144631795;3.33010149140646;7.23191242941513;5.70322973017829;0.668110816750197;0.00780678929590176;3.23580830364124;4.8546750848369;2.97071718989408;0.0632655595299235];
x1_step1.ymin = -1;

% Layer 1
b1 = [17.708929359656437441;-1.331372533565127636;-3.3404961746533907707;13.970394733661795073;3.240206627399499606;-0.76771399440389986868;17.966909015478705669;-13.987134083608671276;-1.5575099682083290986;-4.5893241941627964664];
IW1_1 = [-0.81319803411352886702 1.0178394166509350249 1.1319746966490724649 -4.24459420616444838 0.13951112248118660575 -0.22697178712169285841 20.157765232394520893 -0.51400585573946944162 -18.485857988759548221 8.4726879879559433562;0.25266016699147969549 -0.22471658317522202886 0.37263786120496239507 0.3185372933290624986 -0.092084697587609648517 0.22194992652559372703 -4.0012831276531954927 0.12661367221087421742 -11.638500159806753231 -3.5817066857631441046;1.7156666320877318466 0.3977976347060320772 1.70882240217578385 -2.8303245703588273408 0.11017376658468683304 -0.15800785468136693823 -22.079718076359668544 -0.38361161213838085304 31.355326024625863823 4.7236411790067132088;-9.2143532586304779386 1.3940275965989048501 -3.9754976052572956746 -0.50083160410005611585 0.0081448965608477714301 -0.087272278746649653569 36.711920352871544537 0.091409356482048356729 -41.298476300694247243 0.70900203766696612284;-7.725182584860307955 -1.6399592638270776845 12.888418525813122528 -8.4313287892045565286 0.43907672848366741114 -0.99768602514097881606 -3.6405723605979272151 -1.1492911320049890023 5.7765807396053521217 2.8452942496813293793;1.4711114178373949635 -0.14890174711869696988 -5.6377203842000715994 4.2248560499544884905 -0.16981155346668888595 0.69898565237347942691 1.4514889541213316093 0.55941172283975271196 -2.7416573255727270109 -1.1212538889517658092;8.3583317620737993536 -1.3393720233504839978 3.1954878404553999083 1.0889104597530452345 0.00066159702790512080195 0.048672853453528015788 51.125127963737469372 -0.011372254831764029223 -57.45616785904493895 -1.3771294207147573019;-1.261285185357221339 -0.95618719817725428278 -8.9009302302438868537 7.2207357503315439118 0.72682437848841896511 -1.2468113172150043777 -12.647202123602808044 -1.955529002762867119 -4.0861523888348232347 -2.1348038481580839942;-0.96268810973883756077 -0.19339710273591406708 -0.10382722537919011896 0.69225105302343759028 -0.10875539836498734902 0.27250575472496513241 12.423290687996148662 0.10984147611213811169 -6.2604881603104010068 -5.8263179850422632811;0.80705620290171320441 0.17800338924045375211 1.4222113432467502481 -1.8144669393239167832 0.057204406434191223951 -0.19895012610561990662 -12.912041605705056213 -0.21384070790555739783 6.914226483764114306 -0.93743443904186796178];

% Layer 2
b2 = [0.23560865965209529249;19.922578994527057716;25.90638455171656318;-19.038989875083533576;4.2080588951552408972;2.934201850393372446];
LW2_1 = [-1.7566435171075363009 0.34829895649914394129 2.1083679759891178485 0.11190725579205745843 -2.5485281868081712808 -5.8879294032031630479 2.7025841571787974082 -4.7846313765376056182 3.4238410610876752749 5.1522042134680372527;-18.902838056244135601 -2.8078874526718760052 24.354464268723258868 -10.864842048993434531 5.4628365576455282238 1.7721968638628791126 -18.994224526437658795 -18.782521630705353743 -19.242238590508815577 10.550981220138552885;-13.013187457661764768 -12.229295628275387742 6.6452390098199778379 -40.265833527457829177 -21.453027982572589138 17.362253542238327952 -46.827435324072958167 35.359894592982008987 -22.21474176435987502 0.53560284539972624618;25.964601822500036121 11.887357411667535345 -24.674268329871271277 40.642905665821452033 7.8210097326607890267 -15.508785992037418922 52.4692885581279711 9.4913732958560590447 14.067198147927937768 -27.517621125669766258;0.024148493190559762456 -1.5982733184312816199 -0.73415255869088480445 -5.4224220971905126021 0.58390157187276314765 0.48577622043126983398 -5.0064052877294953348 2.7790564785497378075 -27.546051280093504232 -26.645987780083231655;7.1614368376793615667 2.4943753587233747915 -6.7776474334981093861 9.7144575219651052578 0.62395631728764688884 -10.145369874320042669 8.377074561095367855 3.1300601184058058912 7.873087810449845847 -1.6594738125859387345];

% Layer 3
b3 = [14.260054638175038377;-5.5303601906706258973;23.059277305327452012;-19.688662336162849442;-3.4570603666440264945;-8.0236889274891129986];
LW3_2 = [14.309268009134259003 28.253612911227257598 14.948464469863075976 3.7073690752538581705 -26.412648020249317682 12.611491087372636244;9.8141435886064876115 12.265270990248868799 -4.6020530751283601489 -22.918468888399551986 -4.866518972858043135 13.302160060011008369;-22.74343275764187311 16.197451230228868013 -17.868180824924507988 -21.663794446046349407 -19.007909227298764421 -26.496494831870233355;-18.095973603988120715 -7.4405147926801715741 44.576101919650518823 -27.153979015365433014 42.276223814815871549 13.568422510671775072;4.9658086827082774661 -64.824518785095534668 -62.064644364956315314 77.372122381921585088 2.6250446560210409785 -8.8109244298854516586;11.825208090387505422 15.564469171193854535 22.400838499697059092 -8.6461879141311861474 7.1438524336933726389 -4.4180281870050723825];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = softmax_apply(repmat(b3,1,Q) + LW3_2*a2);

% Output 1
y1 = a3;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
