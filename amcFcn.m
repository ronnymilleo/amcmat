function [y1] = amcFcn(x1)
%AMCFCN neural network simulation function.
%
% Auto-generated by MATLAB, 05-Nov-2019 16:22:58.
% 
% [y1] = amcFcn(x1) takes these arguments:
%   x = 10xQ matrix, input #1
% and returns:
%   y = 6xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1056.1730370041;1056.1730370041;0.00144411013758037;0.00236983182752953;2.26787548547126;0.144581170898345;0.0187351708866686;0.082090848071008;0.136878569017063;-0.599206030338332];
x1_step1.gain = [0.000140037681927827;0.000140037681927827;109.081958190959;71.0706069467641;0.630229679662207;0.00749179390266596;3.25066913783506;4.95572235985436;3.03280514217299;1.09014995246428];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.0760811947319592896;1.2056419984923760769;4.489629439872451222;1.4181482053134282229;3.8014389332519176179;-2.8884526114906914351;0.91715982177842481082;-4.7263419193521505335;1.303108163450590995;5.0913985276181508155];
IW1_1 = [-0.52009571450550107219 0.45580699319160006278 0.29061744865659711046 -1.8617300298161321148 -0.086009905666399336099 1.7113893529339898603 -0.33444643951631458645 0.042582984641418339389 -0.80372452900347812754 -0.31181716529554159845;1.7432549407571169553 2.3289707497917442325 2.6099407588217276022 -2.370605653387599876 0.12002192025480289128 -1.7850440064907946436 -0.5292608873348546572 -0.58899775420649447266 -2.699178243673223232 -1.2707965711732316372;-4.4880919737418638604 -3.9190891130083134186 -5.8442113934935910891 4.2021014968282877078 -0.38393997798529777565 2.0447328293192241766 -1.8093292659245470144 0.51765970177655085127 0.41191506317573112206 0.65775039040175709015;-0.85988276180644040991 -0.63066887216491063217 -6.7535535006500362343 7.5398553483465269309 -0.041527044161457991878 1.2469972546905343513 -1.7945581716820668827 0.014193499630543282564 0.16304689079405162988 -0.40874438549140823529;0.10950433690232966311 1.4061628451419583286 -0.53070285479160561604 3.2849647162596613548 -0.1874212720272476207 4.2980756297613371686 -4.7612215865547993232 -1.4013825171164333572 -3.2727868539410653881 -2.6150021244314696212;0.15403849280862216831 1.1271382949360944092 3.3173470149856898459 1.6766767330007097403 -0.011074490474087449188 -0.55179074618654244677 -2.1679012740231362599 -1.1225545098093883123 -2.379540097498307194 -1.5547903315249695932;-0.093735923989147262869 -1.2980812598868498586 0.012062106396510808085 1.2794686094486318328 -0.79263603931954018655 -0.27259426088569332913 0.77732302968318267578 0.65035884107764541096 0.80571023372432237775 0.74469668177490533356;0.95931253102488267537 1.6450002368907570283 0.39629371640918181763 2.7436662022908380187 0.097566268111126897011 -1.8347194237160533437 3.8168370857702842436 0.79317977122090976838 2.3587941087656507655 1.6682454999355476044;1.3618596976039876179 1.3907699730641993607 2.6984825347100755977 2.2789346645563917093 0.10587671477924788521 4.7375645231255276713 -2.4590456929552719778 -1.6424694899190233066 -1.9157419886019941835 -1.5015883441816373356;3.0784471473309484857 2.5063475685302245566 2.2916777403846855243 -5.9318671619913727611 -1.889890114862217807 0.74536289154357704412 2.2479286105492377601 0.63110556743745971353 3.1892261495857803233 1.3247469444610193712];

% Layer 2
b2 = [-1.3712908136426851247;-2.8565259333512686979;0.93761125014422541657;0.24521544043823645387;2.0145680325944308464;2.694035018042828078];
LW2_1 = [0.70144536390016187788 1.3501891873887754691 -5.0863561381670461259 -5.1549437433583449319 0.59305849176331593142 0.88883639798563363055 0.19577439357153014754 3.1517463258653743985 3.4410628341548612497 0.2570926263078235352;-2.4901848757214386509 5.7968762032474909773 -0.29316292280190481279 -2.7651233268869885862 5.5156811789627457898 -5.3061713140010438039 -1.8103420314670994884 -0.76973644096293480921 -0.29790813648584196782 0.67855369507380325356;2.1196361720304985887 -0.034575577369118093429 2.2365727671318107461 -5.7952535162152285508 0.28291515266576644505 -0.97621172678157275282 -1.234848808135150966 3.6849564277422164338 0.30380101177150997671 0.98048718889475849902;-0.23812452748615345333 -2.4213745817223832901 -0.043728479115255722287 0.43464089757065199615 -2.5363406718736736245 -1.5444793594438122053 0.34595900358303999234 -0.26561994403396715914 1.027232136446308397 4.6765890963785823331;1.3312888175754127307 0.81178526950333795842 -1.4037824041411368636 -3.1138448198519466104 0.075076386080980883619 0.96217817401374161612 0.046776595012788267647 -1.7516902029753167458 0.25442271525926996034 0.33341542583554212298;1.6690938806883572898 -0.74883282755551838772 -3.5133748013229473273 -1.9951188112191473589 1.1019914352006725533 0.96716607637058138458 0.49989362789092756101 -6.0360962911628250893 4.1506541223002644259 -2.7068806738674493495];

% Layer 3
b3 = [1.5649785891569434337;-0.67168277122949671121;-1.7448023817898254961;1.3505049371082282761;-0.050693338117765031348;0.38855646389188974732];
LW3_2 = [0.87663402116073829706 -10.417434007978496169 -5.9247435953725355873 4.7398663334705579686 3.408991014763820715 1.8112334028531840158;-5.8328095028856488113 1.924147440427880662 -3.0957756888963512409 -8.9448305694951315559 -1.6169777249229964067 -2.6472783544444564718;-4.5623309179300601812 3.6470569605347349373 -4.0319163331489376034 0.12751377217956555432 -1.7365048471987409862 -5.2847077790893859373;4.6177637506884483543 0.2022233656050009265 8.6946534004311466504 2.7455744495202609734 3.0362571751498039774 6.5272121601020440806;6.56997217026870306 5.7440812259038773746 -1.4595378647092389635 -0.68953739669113423005 0.84310369021730746653 1.8319500554324545938;-0.95029350368626230861 -2.2441154090720063508 3.193870018556972834 3.5756019538595205098 -5.1249465073338029697 -0.65441344950033952799];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = tansig_apply(repmat(b2,1,Q) + LW2_1*a1);

% Layer 3
a3 = softmax_apply(repmat(b3,1,Q) + LW3_2*a2);

% Output 1
y1 = a3;
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
  if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
  else
    a = iSoftmaxApplyCPU(n);
  end
end
function a = iSoftmaxApplyCPU(n)
  nmax = max(n,[],1);
  n = bsxfun(@minus,n,nmax);
  numerator = exp(n);
  denominator = sum(numerator,1); 
  denominator(denominator == 0) = 1;
  a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
  nmax = max(n,[],1);
  numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
  denominator = sum(numerator,1);
  a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
  numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
  if (denominator == 0)
    a = numerator;
  else
    a = numerator ./ denominator;
  end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end
